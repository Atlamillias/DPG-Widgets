
############################################################################
#    This file is automatically generated -- Changes made to this file     #
#                              may not persist.                            #
############################################################################

"""Base interface implementations for DearPyGui items."""

from typing import Union, Callable, Sequence, Any, overload
from dearpygui import dearpygui
from dearpypixl.px_items import (
    AppItemType,
    CallableItem,
    ContainerItem,
    HandlerItem,
    PositionedItem,
    RegistryItem,
    RootItem,
    SizedItem,
    ValueAbleItem,
    ValueArrayItem,
    WindowItem
)
from dearpypixl.px_typing import ItemId, Array, DPGCallback


__all__ = [
    'mv2dHistogramSeries',
    'mvActivatedHandler',
    'mvActiveHandler',
    'mvAnnotation',
    'mvAreaSeries',
    'mvBarSeries',
    'mvBoolValue',
    'mvButton',
    'mvCandleSeries',
    'mvCharRemap',
    'mvCheckbox',
    'mvChildWindow',
    'mvClickedHandler',
    'mvClipper',
    'mvCollapsingHeader',
    'mvColorButton',
    'mvColorEdit',
    'mvColorMap',
    'mvColorMapButton',
    'mvColorMapRegistry',
    'mvColorMapScale',
    'mvColorMapSlider',
    'mvColorPicker',
    'mvColorValue',
    'mvCombo',
    'mvCustomSeries',
    'mvDatePicker',
    'mvDeactivatedAfterEditHandler',
    'mvDeactivatedHandler',
    'mvDouble4Value',
    'mvDoubleValue',
    'mvDragDouble',
    'mvDragDoubleMulti',
    'mvDragFloat',
    'mvDragFloatMulti',
    'mvDragInt',
    'mvDragIntMulti',
    'mvDragLine',
    'mvDragPayload',
    'mvDragPoint',
    'mvDrawArrow',
    'mvDrawBezierCubic',
    'mvDrawBezierQuadratic',
    'mvDrawCircle',
    'mvDrawEllipse',
    'mvDrawImage',
    'mvDrawImageQuad',
    'mvDrawLayer',
    'mvDrawLine',
    'mvDrawNode',
    'mvDrawPolygon',
    'mvDrawPolyline',
    'mvDrawQuad',
    'mvDrawRect',
    'mvDrawText',
    'mvDrawTriangle',
    'mvDrawlist',
    'mvDynamicTexture',
    'mvEditedHandler',
    'mvErrorSeries',
    'mvFileDialog',
    'mvFileExtension',
    'mvFilterSet',
    'mvFloat4Value',
    'mvFloatValue',
    'mvFloatVectValue',
    'mvFocusHandler',
    'mvFont',
    'mvFontChars',
    'mvFontRange',
    'mvFontRangeHint',
    'mvFontRegistry',
    'mvGroup',
    'mvHLineSeries',
    'mvHandlerRegistry',
    'mvHeatSeries',
    'mvHistogramSeries',
    'mvHoverHandler',
    'mvImage',
    'mvImageButton',
    'mvImageSeries',
    'mvInputDouble',
    'mvInputDoubleMulti',
    'mvInputFloat',
    'mvInputFloatMulti',
    'mvInputInt',
    'mvInputIntMulti',
    'mvInputText',
    'mvInt4Value',
    'mvIntValue',
    'mvItemHandlerRegistry',
    'mvKeyDownHandler',
    'mvKeyPressHandler',
    'mvKeyReleaseHandler',
    'mvKnobFloat',
    'mvLabelSeries',
    'mvLineSeries',
    'mvListbox',
    'mvLoadingIndicator',
    'mvMenu',
    'mvMenuBar',
    'mvMenuItem',
    'mvMouseClickHandler',
    'mvMouseDoubleClickHandler',
    'mvMouseDownHandler',
    'mvMouseDragHandler',
    'mvMouseMoveHandler',
    'mvMouseReleaseHandler',
    'mvMouseWheelHandler',
    'mvNode',
    'mvNodeAttribute',
    'mvNodeEditor',
    'mvNodeLink',
    'mvPieSeries',
    'mvPlot',
    'mvPlotAxis',
    'mvPlotLegend',
    'mvProgressBar',
    'mvRadioButton',
    'mvRawTexture',
    'mvResizeHandler',
    'mvScatterSeries',
    'mvSelectable',
    'mvSeparator',
    'mvSeriesValue',
    'mvShadeSeries',
    'mvSimplePlot',
    'mvSlider3D',
    'mvSliderDouble',
    'mvSliderDoubleMulti',
    'mvSliderFloat',
    'mvSliderFloatMulti',
    'mvSliderInt',
    'mvSliderIntMulti',
    'mvSpacer',
    'mvStage',
    'mvStairSeries',
    'mvStaticTexture',
    'mvStemSeries',
    'mvStringValue',
    'mvSubPlots',
    'mvTab',
    'mvTabBar',
    'mvTabButton',
    'mvTable',
    'mvTableCell',
    'mvTableColumn',
    'mvTableRow',
    'mvTemplateRegistry',
    'mvText',
    'mvTextureRegistry',
    'mvTheme',
    'mvThemeColor',
    'mvThemeComponent',
    'mvThemeStyle',
    'mvTimePicker',
    'mvToggledOpenHandler',
    'mvTooltip',
    'mvTreeNode',
    'mvVLineSeries',
    'mvValueRegistry',
    'mvViewportDrawlist',
    'mvViewportMenuBar',
    'mvVisibleHandler',
    'mvWindowAppItem'
]




class mv2dHistogramSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_2d_histogram_series
    identity = dearpygui.mv2dHistogramSeries, 'mvAppItemType::mv2dHistogramSeries'

    x: Sequence[float]
    y: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool
    xbins: int
    ybins: int
    xmin_range: float
    xmax_range: float
    ymin_range: float
    ymax_range: float
    density: bool
    outliers: bool

    @overload
    def __init__(self, x: Sequence[float], y: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, xbins: int = -1, ybins: int = -1, xmin_range: float = 0.0, xmax_range: float = 1.0, ymin_range: float = 0.0, ymax_range: float = 1.0, density: bool = False, outliers: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvActivatedHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_item_activated_handler
    identity = dearpygui.mvActivatedHandler, 'mvAppItemType::mvActivatedHandler'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, callback: DPGCallback = None, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvActiveHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_item_active_handler
    identity = dearpygui.mvActiveHandler, 'mvAppItemType::mvActiveHandler'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, callback: DPGCallback = None, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvAnnotation(ValueAbleItem, AppItemType):
    command  = dearpygui.add_plot_annotation
    identity = dearpygui.mvAnnotation, 'mvAppItemType::mvAnnotation'

    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool
    offset: Sequence[float]
    color: Sequence[int]
    clamped: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, default_value: Any = (0.0, 0.0), offset: Sequence[float] = (0.0, 0.0), color: Sequence[int] = (0, 0, 0, -255), clamped: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvAreaSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_area_series
    identity = dearpygui.mvAreaSeries, 'mvAppItemType::mvAreaSeries'

    x: Sequence[float]
    y: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool
    fill: Sequence[int]
    contribute_to_bounds: bool

    @overload
    def __init__(self, x: Sequence[float], y: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, fill: Sequence[int] = (0, 0, 0, -255), contribute_to_bounds: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvBarSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_bar_series
    identity = dearpygui.mvBarSeries, 'mvAppItemType::mvBarSeries'

    x: Sequence[float]
    y: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool
    weight: float
    horizontal: bool

    @overload
    def __init__(self, x: Sequence[float], y: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, weight: float = 1.0, horizontal: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvBoolValue(ValueAbleItem, AppItemType):
    command  = dearpygui.add_bool_value
    identity = dearpygui.mvBoolValue, 'mvAppItemType::mvBoolValue'

    label: str
    user_data: Any
    use_internal_label: bool
    source: ItemId

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, source: ItemId = 0, default_value: bool = False, parent: ItemId = 13, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvButton(SizedItem, CallableItem, AppItemType):
    command  = dearpygui.add_button
    identity = dearpygui.mvButton, 'mvAppItemType::mvButton'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    small: bool
    arrow: bool
    direction: int

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, small: bool = False, arrow: bool = False, direction: int = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvCandleSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_candle_series
    identity = dearpygui.mvCandleSeries, 'mvAppItemType::mvCandleSeries'

    dates: Sequence[float]
    opens: Sequence[float]
    closes: Sequence[float]
    lows: Sequence[float]
    highs: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool
    bull_color: Sequence[int]
    bear_color: Sequence[int]
    weight: float
    tooltip: bool
    time_unit: int

    @overload
    def __init__(self, dates: Sequence[float], opens: Sequence[float], closes: Sequence[float], lows: Sequence[float], highs: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, bull_color: Sequence[int] = (0, 255, 113, 255), bear_color: Sequence[int] = (218, 13, 79, 255), weight: float = 0.25, tooltip: bool = True, time_unit: int = 5, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvCharRemap(AppItemType):
    command  = dearpygui.add_char_remap
    identity = dearpygui.mvCharRemap, 'mvAppItemType::mvCharRemap'

    source: int
    target: int
    label: str
    user_data: Any
    use_internal_label: bool

    @overload
    def __init__(self, source: int, target: int, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvCheckbox(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_checkbox
    identity = dearpygui.mvCheckbox, 'mvAppItemType::mvCheckbox'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvChildWindow(WindowItem, SizedItem, AppItemType):
    command  = dearpygui.add_child_window
    identity = dearpygui.mvChildWindow, 'mvAppItemType::mvChildWindow'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    payload_type: str
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    delay_search: bool
    tracked: bool
    track_offset: float
    border: bool
    autosize_x: bool
    autosize_y: bool
    no_scrollbar: bool
    horizontal_scrollbar: bool
    menubar: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', drop_callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', delay_search: bool = False, tracked: bool = False, track_offset: float = 0.5, border: bool = True, autosize_x: bool = False, autosize_y: bool = False, no_scrollbar: bool = False, horizontal_scrollbar: bool = False, menubar: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvClickedHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_item_clicked_handler
    identity = dearpygui.mvClickedHandler, 'mvAppItemType::mvClickedHandler'

    button: int
    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, button: int = -1, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, callback: DPGCallback = None, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvClipper(ContainerItem, AppItemType):
    command  = dearpygui.add_clipper
    identity = dearpygui.mvClipper, 'mvAppItemType::mvClipper'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    show: bool
    delay_search: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, show: bool = True, delay_search: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvCollapsingHeader(ContainerItem, PositionedItem, AppItemType):
    command  = dearpygui.add_collapsing_header
    identity = dearpygui.mvCollapsingHeader, 'mvAppItemType::mvCollapsingHeader'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    delay_search: bool
    tracked: bool
    track_offset: float
    closable: bool
    open_on_double_click: bool
    open_on_arrow: bool
    leaf: bool
    bullet: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', delay_search: bool = False, tracked: bool = False, track_offset: float = 0.5, closable: bool = False, default_open: bool = False, open_on_double_click: bool = False, open_on_arrow: bool = False, leaf: bool = False, bullet: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvColorButton(SizedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_color_button
    identity = dearpygui.mvColorButton, 'mvAppItemType::mvColorButton'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    no_alpha: bool
    no_border: bool
    no_drag_drop: bool

    @overload
    def __init__(self, default_value: Sequence[int] = (0, 0, 0, 255), *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, no_alpha: bool = False, no_border: bool = False, no_drag_drop: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvColorEdit(SizedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_color_edit
    identity = dearpygui.mvColorEdit, 'mvAppItemType::mvColorEdit'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    no_alpha: bool
    no_picker: bool
    no_options: bool
    no_small_preview: bool
    no_inputs: bool
    no_tooltip: bool
    no_label: bool
    no_drag_drop: bool
    alpha_bar: bool
    alpha_preview: int
    display_mode: int
    display_type: int
    input_mode: int

    @overload
    def __init__(self, default_value: Sequence[int] = (0, 0, 0, 255), *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, no_alpha: bool = False, no_picker: bool = False, no_options: bool = False, no_small_preview: bool = False, no_inputs: bool = False, no_tooltip: bool = False, no_label: bool = False, no_drag_drop: bool = False, alpha_bar: bool = False, alpha_preview: int = 0, display_mode: int = 1048576, display_type: int = 8388608, input_mode: int = 134217728, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvColorMap(AppItemType):
    command  = dearpygui.add_colormap
    identity = dearpygui.mvColorMap, 'mvAppItemType::mvColorMap'

    colors: list[Sequence[int]]
    qualitative: bool
    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, colors: list[Sequence[int]], qualitative: bool, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, show: bool = True, parent: ItemId = 14, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvColorMapButton(SizedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_colormap_button
    identity = dearpygui.mvColorMapButton, 'mvAppItemType::mvColorMapButton'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float

    @overload
    def __init__(self, default_value: Sequence[int] = (0, 0, 0, 255), *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvColorMapRegistry(RegistryItem, AppItemType):
    command  = dearpygui.add_colormap_registry
    identity = dearpygui.mvColorMapRegistry, 'mvAppItemType::mvColorMapRegistry'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, show: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvColorMapScale(SizedItem, AppItemType):
    command  = dearpygui.add_colormap_scale
    identity = dearpygui.mvColorMapScale, 'mvAppItemType::mvColorMapScale'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drop_callback: DPGCallback
    show: bool
    colormap: ItemId
    min_scale: float
    max_scale: float

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', drop_callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), colormap: ItemId = 0, min_scale: float = 0.0, max_scale: float = 1.0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvColorMapSlider(SizedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_colormap_slider
    identity = dearpygui.mvColorMapSlider, 'mvAppItemType::mvColorMapSlider'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    payload_type: str
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    tracked: bool
    track_offset: float

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: float = 0.0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvColorPicker(SizedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_color_picker
    identity = dearpygui.mvColorPicker, 'mvAppItemType::mvColorPicker'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    no_alpha: bool
    no_side_preview: bool
    no_small_preview: bool
    no_inputs: bool
    no_tooltip: bool
    no_label: bool
    alpha_bar: bool
    display_rgb: bool
    display_hsv: bool
    display_hex: bool
    picker_mode: int
    alpha_preview: int
    display_type: int
    input_mode: int

    @overload
    def __init__(self, default_value: Sequence[int] = (0, 0, 0, 255), *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, no_alpha: bool = False, no_side_preview: bool = False, no_small_preview: bool = False, no_inputs: bool = False, no_tooltip: bool = False, no_label: bool = False, alpha_bar: bool = False, display_rgb: bool = False, display_hsv: bool = False, display_hex: bool = False, picker_mode: int = 33554432, alpha_preview: int = 0, display_type: int = 8388608, input_mode: int = 134217728, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvColorValue(ValueAbleItem, AppItemType):
    command  = dearpygui.add_color_value
    identity = dearpygui.mvColorValue, 'mvAppItemType::mvColorValue'

    label: str
    user_data: Any
    use_internal_label: bool
    source: ItemId

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, source: ItemId = 0, default_value: Sequence[float] = (0.0, 0.0, 0.0, 0.0), parent: ItemId = 13, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvCombo(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_combo
    identity = dearpygui.mvCombo, 'mvAppItemType::mvCombo'

    items: Sequence[str]
    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    popup_align_left: bool
    no_arrow_button: bool
    no_preview: bool
    height_mode: int

    @overload
    def __init__(self, items: Sequence[str] = (), *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: str = '', popup_align_left: bool = False, no_arrow_button: bool = False, no_preview: bool = False, height_mode: int = 1, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvCustomSeries(ContainerItem, ValueArrayItem, CallableItem, AppItemType):
    command  = dearpygui.add_custom_series
    identity = dearpygui.mvCustomSeries, 'mvAppItemType::mvCustomSeries'

    x: Sequence[float]
    y: Sequence[float]
    channel_count: int
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool
    y1: Any
    y2: Any
    y3: Any
    tooltip: bool

    @overload
    def __init__(self, x: Sequence[float], y: Sequence[float], channel_count: int, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, callback: DPGCallback = None, show: bool = True, y1: Any = [], y2: Any = [], y3: Any = [], tooltip: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDatePicker(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_date_picker
    identity = dearpygui.mvDatePicker, 'mvAppItemType::mvDatePicker'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    tracked: bool
    track_offset: float
    level: int

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: dict = {'month_day': 14, 'year': 20, 'month': 5}, level: int = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDeactivatedAfterEditHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_item_deactivated_after_edit_handler
    identity = dearpygui.mvDeactivatedAfterEditHandler, 'mvAppItemType::mvDeactivatedAfterEditHandler'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, callback: DPGCallback = None, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDeactivatedHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_item_deactivated_handler
    identity = dearpygui.mvDeactivatedHandler, 'mvAppItemType::mvDeactivatedHandler'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, callback: DPGCallback = None, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDouble4Value(ValueAbleItem, AppItemType):
    command  = dearpygui.add_double4_value
    identity = dearpygui.mvDouble4Value, 'mvAppItemType::mvDouble4Value'

    label: str
    user_data: Any
    use_internal_label: bool
    source: ItemId

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, source: ItemId = 0, default_value: Any = (0.0, 0.0, 0.0, 0.0), parent: ItemId = 13, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDoubleValue(ValueAbleItem, AppItemType):
    command  = dearpygui.add_double_value
    identity = dearpygui.mvDoubleValue, 'mvAppItemType::mvDoubleValue'

    label: str
    user_data: Any
    use_internal_label: bool
    source: ItemId

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, source: ItemId = 0, default_value: float = 0.0, parent: ItemId = 13, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDragDouble(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_drag_double
    identity = dearpygui.mvDragDouble, 'mvAppItemType::mvDragDouble'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    format: str
    speed: float
    no_input: bool
    clamped: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: float = 0.0, format: str = '%0.3f', speed: float = 1.0, min_value: float = 0.0, max_value: float = 100.0, no_input: bool = False, clamped: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDragDoubleMulti(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_drag_doublex
    identity = dearpygui.mvDragDoubleMulti, 'mvAppItemType::mvDragDoubleMulti'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    size: int
    format: str
    speed: float
    no_input: bool
    clamped: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: Any = (0.0, 0.0, 0.0, 0.0), size: int = 4, format: str = '%0.3f', speed: float = 1.0, min_value: float = 0.0, max_value: float = 100.0, no_input: bool = False, clamped: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDragFloat(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_drag_float
    identity = dearpygui.mvDragFloat, 'mvAppItemType::mvDragFloat'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    format: str
    speed: float
    no_input: bool
    clamped: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: float = 0.0, format: str = '%0.3f', speed: float = 1.0, min_value: float = 0.0, max_value: float = 100.0, no_input: bool = False, clamped: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDragFloatMulti(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_drag_floatx
    identity = dearpygui.mvDragFloatMulti, 'mvAppItemType::mvDragFloatMulti'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    size: int
    format: str
    speed: float
    no_input: bool
    clamped: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: Sequence[float] = (0.0, 0.0, 0.0, 0.0), size: int = 4, format: str = '%0.3f', speed: float = 1.0, min_value: float = 0.0, max_value: float = 100.0, no_input: bool = False, clamped: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDragInt(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_drag_int
    identity = dearpygui.mvDragInt, 'mvAppItemType::mvDragInt'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    format: str
    speed: float
    no_input: bool
    clamped: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: int = 0, format: str = '%d', speed: float = 1.0, min_value: int = 0, max_value: int = 100, no_input: bool = False, clamped: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDragIntMulti(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_drag_intx
    identity = dearpygui.mvDragIntMulti, 'mvAppItemType::mvDragIntMulti'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    size: int
    format: str
    speed: float
    no_input: bool
    clamped: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: Sequence[int] = (0, 0, 0, 0), size: int = 4, format: str = '%d', speed: float = 1.0, min_value: int = 0, max_value: int = 100, no_input: bool = False, clamped: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDragLine(ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_drag_line
    identity = dearpygui.mvDragLine, 'mvAppItemType::mvDragLine'

    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool
    color: Sequence[int]
    thickness: float
    show_label: bool
    vertical: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, callback: DPGCallback = None, show: bool = True, default_value: Any = 0.0, color: Sequence[int] = (0, 0, 0, -255), thickness: float = 1.0, show_label: bool = True, vertical: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDragPayload(ContainerItem, AppItemType):
    command  = dearpygui.add_drag_payload
    identity = dearpygui.mvDragPayload, 'mvAppItemType::mvDragPayload'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool
    drag_data: Any
    drop_data: Any
    payload_type: str

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, show: bool = True, drag_data: Any = None, drop_data: Any = None, payload_type: str = '$$DPG_PAYLOAD', **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDragPoint(ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_drag_point
    identity = dearpygui.mvDragPoint, 'mvAppItemType::mvDragPoint'

    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool
    color: Sequence[int]
    thickness: float
    show_label: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, callback: DPGCallback = None, show: bool = True, default_value: Any = (0.0, 0.0), color: Sequence[int] = (0, 0, 0, -255), thickness: float = 1.0, show_label: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawArrow(AppItemType):
    command  = dearpygui.draw_arrow
    identity = dearpygui.mvDrawArrow, 'mvAppItemType::mvDrawArrow'

    p1: Sequence[float]
    p2: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    color: Sequence[int]
    thickness: float
    size: int

    @overload
    def __init__(self, p1: Sequence[float], p2: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, color: Sequence[int] = (255, 255, 255, 255), thickness: float = 1.0, size: int = 4, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawBezierCubic(AppItemType):
    command  = dearpygui.draw_bezier_cubic
    identity = dearpygui.mvDrawBezierCubic, 'mvAppItemType::mvDrawBezierCubic'

    p1: Sequence[float]
    p2: Sequence[float]
    p3: Sequence[float]
    p4: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    color: Sequence[int]
    thickness: float
    segments: int

    @overload
    def __init__(self, p1: Sequence[float], p2: Sequence[float], p3: Sequence[float], p4: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, color: Sequence[int] = (255, 255, 255, 255), thickness: float = 1.0, segments: int = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawBezierQuadratic(AppItemType):
    command  = dearpygui.draw_bezier_quadratic
    identity = dearpygui.mvDrawBezierQuadratic, 'mvAppItemType::mvDrawBezierQuadratic'

    p1: Sequence[float]
    p2: Sequence[float]
    p3: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    color: Sequence[int]
    thickness: float
    segments: int

    @overload
    def __init__(self, p1: Sequence[float], p2: Sequence[float], p3: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, color: Sequence[int] = (255, 255, 255, 255), thickness: float = 1.0, segments: int = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawCircle(AppItemType):
    command  = dearpygui.draw_circle
    identity = dearpygui.mvDrawCircle, 'mvAppItemType::mvDrawCircle'

    center: Sequence[float]
    radius: float
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    color: Sequence[int]
    fill: Sequence[int]
    thickness: float
    segments: int

    @overload
    def __init__(self, center: Sequence[float], radius: float, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, color: Sequence[int] = (255, 255, 255, 255), fill: Sequence[int] = (0, 0, 0, -255), thickness: float = 1.0, segments: int = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawEllipse(AppItemType):
    command  = dearpygui.draw_ellipse
    identity = dearpygui.mvDrawEllipse, 'mvAppItemType::mvDrawEllipse'

    pmin: Sequence[float]
    pmax: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    color: Sequence[int]
    fill: Sequence[int]
    thickness: float
    segments: int

    @overload
    def __init__(self, pmin: Sequence[float], pmax: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, color: Sequence[int] = (255, 255, 255, 255), fill: Sequence[int] = (0, 0, 0, -255), thickness: float = 1.0, segments: int = 32, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawImage(AppItemType):
    command  = dearpygui.draw_image
    identity = dearpygui.mvDrawImage, 'mvAppItemType::mvDrawImage'

    texture_tag: Union[int, str]
    pmin: Sequence[float]
    pmax: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    uv_min: Sequence[float]
    uv_max: Sequence[float]
    color: Sequence[int]

    @overload
    def __init__(self, texture_tag: Union[int, str], pmin: Sequence[float], pmax: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, uv_min: Sequence[float] = (0.0, 0.0), uv_max: Sequence[float] = (1.0, 1.0), color: Sequence[int] = (255, 255, 255, 255), **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawImageQuad(AppItemType):
    command  = dearpygui.draw_image_quad
    identity = dearpygui.mvDrawImageQuad, 'mvAppItemType::mvDrawImageQuad'

    texture_tag: Union[int, str]
    p1: Sequence[float]
    p2: Sequence[float]
    p3: Sequence[float]
    p4: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    uv1: Sequence[float]
    uv2: Sequence[float]
    uv3: Sequence[float]
    uv4: Sequence[float]
    color: Sequence[int]

    @overload
    def __init__(self, texture_tag: Union[int, str], p1: Sequence[float], p2: Sequence[float], p3: Sequence[float], p4: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, uv1: Sequence[float] = (0.0, 0.0), uv2: Sequence[float] = (1.0, 0.0), uv3: Sequence[float] = (1.0, 1.0), uv4: Sequence[float] = (0.0, 1.0), color: Sequence[int] = (255, 255, 255, 255), **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawLayer(ContainerItem, AppItemType):
    command  = dearpygui.add_draw_layer
    identity = dearpygui.mvDrawLayer, 'mvAppItemType::mvDrawLayer'

    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    perspective_divide: bool
    depth_clipping: bool
    cull_mode: int

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, perspective_divide: bool = False, depth_clipping: bool = False, cull_mode: int = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawLine(AppItemType):
    command  = dearpygui.draw_line
    identity = dearpygui.mvDrawLine, 'mvAppItemType::mvDrawLine'

    p1: Sequence[float]
    p2: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    color: Sequence[int]
    thickness: float

    @overload
    def __init__(self, p1: Sequence[float], p2: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, color: Sequence[int] = (255, 255, 255, 255), thickness: float = 1.0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawNode(ContainerItem, AppItemType):
    command  = dearpygui.add_draw_node
    identity = dearpygui.mvDrawNode, 'mvAppItemType::mvDrawNode'

    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawPolygon(AppItemType):
    command  = dearpygui.draw_polygon
    identity = dearpygui.mvDrawPolygon, 'mvAppItemType::mvDrawPolygon'

    points: list[list[float]]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    color: Sequence[int]
    fill: Sequence[int]
    thickness: float

    @overload
    def __init__(self, points: list[list[float]], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, color: Sequence[int] = (255, 255, 255, 255), fill: Sequence[int] = (0, 0, 0, -255), thickness: float = 1.0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawPolyline(AppItemType):
    command  = dearpygui.draw_polyline
    identity = dearpygui.mvDrawPolyline, 'mvAppItemType::mvDrawPolyline'

    points: list[list[float]]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    closed: bool
    color: Sequence[int]
    thickness: float

    @overload
    def __init__(self, points: list[list[float]], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, closed: bool = False, color: Sequence[int] = (255, 255, 255, 255), thickness: float = 1.0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawQuad(AppItemType):
    command  = dearpygui.draw_quad
    identity = dearpygui.mvDrawQuad, 'mvAppItemType::mvDrawQuad'

    p1: Sequence[float]
    p2: Sequence[float]
    p3: Sequence[float]
    p4: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    color: Sequence[int]
    fill: Sequence[int]
    thickness: float

    @overload
    def __init__(self, p1: Sequence[float], p2: Sequence[float], p3: Sequence[float], p4: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, color: Sequence[int] = (255, 255, 255, 255), fill: Sequence[int] = (0, 0, 0, -255), thickness: float = 1.0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawRect(AppItemType):
    command  = dearpygui.draw_rectangle
    identity = dearpygui.mvDrawRect, 'mvAppItemType::mvDrawRect'

    pmin: Sequence[float]
    pmax: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    color: Sequence[int]
    color_upper_left: Sequence[int]
    color_upper_right: Sequence[int]
    color_bottom_right: Sequence[int]
    color_bottom_left: Sequence[int]
    fill: Sequence[int]
    multicolor: bool
    rounding: float
    thickness: float

    @overload
    def __init__(self, pmin: Sequence[float], pmax: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, color: Sequence[int] = (255, 255, 255, 255), color_upper_left: Sequence[int] = (255, 255, 255, 255), color_upper_right: Sequence[int] = (255, 255, 255, 255), color_bottom_right: Sequence[int] = (255, 255, 255, 255), color_bottom_left: Sequence[int] = (255, 255, 255, 255), fill: Sequence[int] = (0, 0, 0, -255), multicolor: bool = False, rounding: float = 0.0, thickness: float = 1.0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawText(PositionedItem, AppItemType):
    command  = dearpygui.draw_text
    identity = dearpygui.mvDrawText, 'mvAppItemType::mvDrawText'

    text: str
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    color: Sequence[int]
    size: float

    @overload
    def __init__(self, pos: Array[int, int], text: str, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, color: Sequence[int] = (255, 255, 255, 255), size: float = 10.0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawTriangle(AppItemType):
    command  = dearpygui.draw_triangle
    identity = dearpygui.mvDrawTriangle, 'mvAppItemType::mvDrawTriangle'

    p1: Sequence[float]
    p2: Sequence[float]
    p3: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    color: Sequence[int]
    fill: Sequence[int]
    thickness: float

    @overload
    def __init__(self, p1: Sequence[float], p2: Sequence[float], p3: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, color: Sequence[int] = (255, 255, 255, 255), fill: Sequence[int] = (0, 0, 0, -255), thickness: float = 1.0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDrawlist(ContainerItem, SizedItem, CallableItem, AppItemType):
    command  = dearpygui.add_drawlist
    identity = dearpygui.mvDrawlist, 'mvAppItemType::mvDrawlist'

    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    show: bool
    filter_key: str
    delay_search: bool
    tracked: bool
    track_offset: float

    @overload
    def __init__(self, width: int, height: int, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', delay_search: bool = False, tracked: bool = False, track_offset: float = 0.5, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvDynamicTexture(ValueAbleItem, AppItemType):
    command  = dearpygui.add_dynamic_texture
    identity = dearpygui.mvDynamicTexture, 'mvAppItemType::mvDynamicTexture'

    width: int
    height: int
    label: str
    user_data: Any
    use_internal_label: bool

    @overload
    def __init__(self, width: int, height: int, default_value: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 12, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvEditedHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_item_edited_handler
    identity = dearpygui.mvEditedHandler, 'mvAppItemType::mvEditedHandler'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, callback: DPGCallback = None, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvErrorSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_error_series
    identity = dearpygui.mvErrorSeries, 'mvAppItemType::mvErrorSeries'

    x: Sequence[float]
    y: Sequence[float]
    negative: Sequence[float]
    positive: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool
    contribute_to_bounds: bool
    horizontal: bool

    @overload
    def __init__(self, x: Sequence[float], y: Sequence[float], negative: Sequence[float], positive: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, contribute_to_bounds: bool = True, horizontal: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvFileDialog(RootItem, CallableItem, AppItemType):
    command  = dearpygui.add_file_dialog
    identity = dearpygui.mvFileDialog, 'mvAppItemType::mvFileDialog'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    height: int
    show: bool
    file_count: int
    modal: bool
    directory_selector: bool
    min_size: Sequence[int]
    max_size: Sequence[int]
    cancel_callback: DPGCallback

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, callback: DPGCallback = None, show: bool = True, default_path: str = '', default_filename: str = '.', file_count: int = 0, modal: bool = False, directory_selector: bool = False, min_size: Sequence[int] = [100, 100], max_size: Sequence[int] = [30000, 30000], cancel_callback: DPGCallback = None, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvFileExtension(AppItemType):
    command  = dearpygui.add_file_extension
    identity = dearpygui.mvFileExtension, 'mvAppItemType::mvFileExtension'

    extension: str
    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    height: int
    before: ItemId
    custom_text: str
    color: Sequence[int]

    @overload
    def __init__(self, extension: str, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, parent: ItemId = 0, before: ItemId = 0, custom_text: str = '', color: Sequence[int] = (-255, 0, 0, 255), **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvFilterSet(ContainerItem, AppItemType):
    command  = dearpygui.add_filter_set
    identity = dearpygui.mvFilterSet, 'mvAppItemType::mvFilterSet'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    show: bool
    delay_search: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, show: bool = True, delay_search: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvFloat4Value(ValueAbleItem, AppItemType):
    command  = dearpygui.add_float4_value
    identity = dearpygui.mvFloat4Value, 'mvAppItemType::mvFloat4Value'

    label: str
    user_data: Any
    use_internal_label: bool
    source: ItemId

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, source: ItemId = 0, default_value: Sequence[float] = (0.0, 0.0, 0.0, 0.0), parent: ItemId = 13, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvFloatValue(ValueAbleItem, AppItemType):
    command  = dearpygui.add_float_value
    identity = dearpygui.mvFloatValue, 'mvAppItemType::mvFloatValue'

    label: str
    user_data: Any
    use_internal_label: bool
    source: ItemId

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, source: ItemId = 0, default_value: float = 0.0, parent: ItemId = 13, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvFloatVectValue(ValueAbleItem, AppItemType):
    command  = dearpygui.add_float_vect_value
    identity = dearpygui.mvFloatVectValue, 'mvAppItemType::mvFloatVectValue'

    label: str
    user_data: Any
    use_internal_label: bool
    source: ItemId

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, source: ItemId = 0, default_value: Sequence[float] = (), parent: ItemId = 13, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvFocusHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_item_focus_handler
    identity = dearpygui.mvFocusHandler, 'mvAppItemType::mvFocusHandler'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, callback: DPGCallback = None, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvFont(ContainerItem, AppItemType):
    command  = dearpygui.add_font
    identity = dearpygui.mvFont, 'mvAppItemType::mvFont'

    file: str
    size: int
    label: str
    user_data: Any
    use_internal_label: bool

    @overload
    def __init__(self, file: str, size: int, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 10, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvFontChars(AppItemType):
    command  = dearpygui.add_font_chars
    identity = dearpygui.mvFontChars, 'mvAppItemType::mvFontChars'

    chars: Sequence[int]
    label: str
    user_data: Any
    use_internal_label: bool

    @overload
    def __init__(self, chars: Sequence[int], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvFontRange(AppItemType):
    command  = dearpygui.add_font_range
    identity = dearpygui.mvFontRange, 'mvAppItemType::mvFontRange'

    first_char: int
    last_char: int
    label: str
    user_data: Any
    use_internal_label: bool

    @overload
    def __init__(self, first_char: int, last_char: int, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvFontRangeHint(AppItemType):
    command  = dearpygui.add_font_range_hint
    identity = dearpygui.mvFontRangeHint, 'mvAppItemType::mvFontRangeHint'

    hint: int
    label: str
    user_data: Any
    use_internal_label: bool

    @overload
    def __init__(self, hint: int, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvFontRegistry(RegistryItem, AppItemType):
    command  = dearpygui.add_font_registry
    identity = dearpygui.mvFontRegistry, 'mvAppItemType::mvFontRegistry'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvGroup(ContainerItem, PositionedItem, AppItemType):
    command  = dearpygui.add_group
    identity = dearpygui.mvGroup, 'mvAppItemType::mvGroup'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    delay_search: bool
    tracked: bool
    track_offset: float
    horizontal: bool
    horizontal_spacing: float
    xoffset: float

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', delay_search: bool = False, tracked: bool = False, track_offset: float = 0.5, horizontal: bool = False, horizontal_spacing: float = -1, xoffset: float = 0.0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvHLineSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_hline_series
    identity = dearpygui.mvHLineSeries, 'mvAppItemType::mvHLineSeries'

    x: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool

    @overload
    def __init__(self, x: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvHandlerRegistry(RegistryItem, AppItemType):
    command  = dearpygui.add_handler_registry
    identity = dearpygui.mvHandlerRegistry, 'mvAppItemType::mvHandlerRegistry'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvHeatSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_heat_series
    identity = dearpygui.mvHeatSeries, 'mvAppItemType::mvHeatSeries'

    x: Sequence[float]
    rows: int
    cols: int
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool
    scale_min: float
    scale_max: float
    bounds_min: Any
    bounds_max: Any
    format: str
    contribute_to_bounds: bool

    @overload
    def __init__(self, x: Sequence[float], rows: int, cols: int, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, scale_min: float = 0.0, scale_max: float = 1.0, bounds_min: Any = (0.0, 0.0), bounds_max: Any = (1.0, 1.0), format: str = '%0.1f', contribute_to_bounds: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvHistogramSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_histogram_series
    identity = dearpygui.mvHistogramSeries, 'mvAppItemType::mvHistogramSeries'

    x: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool
    bins: int
    bar_scale: float
    min_range: float
    max_range: float
    cumlative: bool
    density: bool
    outliers: bool
    contribute_to_bounds: bool

    @overload
    def __init__(self, x: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, bins: int = -1, bar_scale: float = 1.0, min_range: float = 0.0, max_range: float = 1.0, cumlative: bool = False, density: bool = False, outliers: bool = True, contribute_to_bounds: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvHoverHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_item_hover_handler
    identity = dearpygui.mvHoverHandler, 'mvAppItemType::mvHoverHandler'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, callback: DPGCallback = None, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvImage(SizedItem, AppItemType):
    command  = dearpygui.add_image
    identity = dearpygui.mvImage, 'mvAppItemType::mvImage'

    texture_tag: Union[int, str]
    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    tracked: bool
    track_offset: float
    tint_color: Sequence[float]
    border_color: Sequence[float]
    uv_min: Sequence[float]
    uv_max: Sequence[float]

    @overload
    def __init__(self, texture_tag: Union[int, str], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, tint_color: Sequence[float] = (255, 255, 255, 255), border_color: Sequence[float] = (0, 0, 0, 0), uv_min: Sequence[float] = (0.0, 0.0), uv_max: Sequence[float] = (1.0, 1.0), **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvImageButton(SizedItem, CallableItem, AppItemType):
    command  = dearpygui.add_image_button
    identity = dearpygui.mvImageButton, 'mvAppItemType::mvImageButton'

    texture_tag: Union[int, str]
    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    frame_padding: int
    tint_color: Sequence[float]
    background_color: Sequence[float]
    uv_min: Sequence[float]
    uv_max: Sequence[float]

    @overload
    def __init__(self, texture_tag: Union[int, str], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, frame_padding: int = -1, tint_color: Sequence[float] = (255, 255, 255, 255), background_color: Sequence[float] = (0, 0, 0, 0), uv_min: Sequence[float] = (0.0, 0.0), uv_max: Sequence[float] = (1.0, 1.0), **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvImageSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_image_series
    identity = dearpygui.mvImageSeries, 'mvAppItemType::mvImageSeries'

    texture_tag: Union[int, str]
    bounds_min: Sequence[float]
    bounds_max: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool
    uv_min: Sequence[float]
    uv_max: Sequence[float]
    tint_color: Sequence[int]

    @overload
    def __init__(self, texture_tag: Union[int, str], bounds_min: Sequence[float], bounds_max: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, uv_min: Sequence[float] = (0.0, 0.0), uv_max: Sequence[float] = (1.0, 1.0), tint_color: Sequence[int] = (255, 255, 255, 255), **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvInputDouble(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_input_double
    identity = dearpygui.mvInputDouble, 'mvAppItemType::mvInputDouble'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    format: str
    step: float
    step_fast: float
    min_clamped: bool
    max_clamped: bool
    on_enter: bool
    readonly: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: float = 0.0, format: str = '%.3f', min_value: float = 0.0, max_value: float = 100.0, step: float = 0.1, step_fast: float = 1.0, min_clamped: bool = False, max_clamped: bool = False, on_enter: bool = False, readonly: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvInputDoubleMulti(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_input_doublex
    identity = dearpygui.mvInputDoubleMulti, 'mvAppItemType::mvInputDoubleMulti'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    format: str
    size: int
    min_clamped: bool
    max_clamped: bool
    on_enter: bool
    readonly: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: Any = (0.0, 0.0, 0.0, 0.0), format: str = '%.3f', min_value: float = 0.0, max_value: float = 100.0, size: int = 4, min_clamped: bool = False, max_clamped: bool = False, on_enter: bool = False, readonly: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvInputFloat(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_input_float
    identity = dearpygui.mvInputFloat, 'mvAppItemType::mvInputFloat'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    format: str
    step: float
    step_fast: float
    min_clamped: bool
    max_clamped: bool
    on_enter: bool
    readonly: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: float = 0.0, format: str = '%.3f', min_value: float = 0.0, max_value: float = 100.0, step: float = 0.1, step_fast: float = 1.0, min_clamped: bool = False, max_clamped: bool = False, on_enter: bool = False, readonly: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvInputFloatMulti(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_input_floatx
    identity = dearpygui.mvInputFloatMulti, 'mvAppItemType::mvInputFloatMulti'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    format: str
    size: int
    min_clamped: bool
    max_clamped: bool
    on_enter: bool
    readonly: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: Sequence[float] = (0.0, 0.0, 0.0, 0.0), format: str = '%.3f', min_value: float = 0.0, max_value: float = 100.0, size: int = 4, min_clamped: bool = False, max_clamped: bool = False, on_enter: bool = False, readonly: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvInputInt(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_input_int
    identity = dearpygui.mvInputInt, 'mvAppItemType::mvInputInt'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    step: int
    step_fast: int
    min_clamped: bool
    max_clamped: bool
    on_enter: bool
    readonly: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: int = 0, min_value: int = 0, max_value: int = 100, step: int = 1, step_fast: int = 100, min_clamped: bool = False, max_clamped: bool = False, on_enter: bool = False, readonly: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvInputIntMulti(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_input_intx
    identity = dearpygui.mvInputIntMulti, 'mvAppItemType::mvInputIntMulti'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    size: int
    min_clamped: bool
    max_clamped: bool
    on_enter: bool
    readonly: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: Sequence[int] = (0, 0, 0, 0), min_value: int = 0, max_value: int = 100, size: int = 4, min_clamped: bool = False, max_clamped: bool = False, on_enter: bool = False, readonly: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvInputText(SizedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_input_text
    identity = dearpygui.mvInputText, 'mvAppItemType::mvInputText'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    hint: str
    multiline: bool
    no_spaces: bool
    uppercase: bool
    tab_input: bool
    decimal: bool
    hexadecimal: bool
    readonly: bool
    password: bool
    scientific: bool
    on_enter: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: str = '', hint: str = '', multiline: bool = False, no_spaces: bool = False, uppercase: bool = False, tab_input: bool = False, decimal: bool = False, hexadecimal: bool = False, readonly: bool = False, password: bool = False, scientific: bool = False, on_enter: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvInt4Value(ValueAbleItem, AppItemType):
    command  = dearpygui.add_int4_value
    identity = dearpygui.mvInt4Value, 'mvAppItemType::mvInt4Value'

    label: str
    user_data: Any
    use_internal_label: bool
    source: ItemId

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, source: ItemId = 0, default_value: Sequence[int] = (0, 0, 0, 0), parent: ItemId = 13, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvIntValue(ValueAbleItem, AppItemType):
    command  = dearpygui.add_int_value
    identity = dearpygui.mvIntValue, 'mvAppItemType::mvIntValue'

    label: str
    user_data: Any
    use_internal_label: bool
    source: ItemId

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, source: ItemId = 0, default_value: int = 0, parent: ItemId = 13, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvItemHandlerRegistry(RegistryItem, AppItemType):
    command  = dearpygui.add_item_handler_registry
    identity = dearpygui.mvItemHandlerRegistry, 'mvAppItemType::mvItemHandlerRegistry'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvKeyDownHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_key_down_handler
    identity = dearpygui.mvKeyDownHandler, 'mvAppItemType::mvKeyDownHandler'

    key: int
    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, key: int = -1, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, callback: DPGCallback = None, show: bool = True, parent: ItemId = 11, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvKeyPressHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_key_press_handler
    identity = dearpygui.mvKeyPressHandler, 'mvAppItemType::mvKeyPressHandler'

    key: int
    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, key: int = -1, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, callback: DPGCallback = None, show: bool = True, parent: ItemId = 11, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvKeyReleaseHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_key_release_handler
    identity = dearpygui.mvKeyReleaseHandler, 'mvAppItemType::mvKeyReleaseHandler'

    key: int
    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, key: int = -1, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, callback: DPGCallback = None, show: bool = True, parent: ItemId = 11, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvKnobFloat(SizedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_knob_float
    identity = dearpygui.mvKnobFloat, 'mvAppItemType::mvKnobFloat'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: float = 0.0, min_value: float = 0.0, max_value: float = 100.0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvLabelSeries(AppItemType):
    command  = dearpygui.add_text_point
    identity = dearpygui.mvLabelSeries, 'mvAppItemType::mvLabelSeries'

    x: float
    y: float
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool
    x_offset: int
    y_offset: int
    vertical: bool

    @overload
    def __init__(self, x: float, y: float, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, x_offset: int = Ellipsis, y_offset: int = Ellipsis, vertical: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvLineSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_line_series
    identity = dearpygui.mvLineSeries, 'mvAppItemType::mvLineSeries'

    x: Sequence[float]
    y: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool

    @overload
    def __init__(self, x: Sequence[float], y: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvListbox(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_listbox
    identity = dearpygui.mvListbox, 'mvAppItemType::mvListbox'

    items: Sequence[str]
    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    num_items: int

    @overload
    def __init__(self, items: Sequence[str] = (), *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: str = '', num_items: int = 3, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvLoadingIndicator(SizedItem, AppItemType):
    command  = dearpygui.add_loading_indicator
    identity = dearpygui.mvLoadingIndicator, 'mvAppItemType::mvLoadingIndicator'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    payload_type: str
    drop_callback: DPGCallback
    show: bool
    style: int
    circle_count: int
    speed: float
    radius: float
    thickness: float
    color: Sequence[int]
    secondary_color: Sequence[int]

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', drop_callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), style: int = 0, circle_count: int = 8, speed: float = 1.0, radius: float = 3.0, thickness: float = 1.0, color: Sequence[int] = (51, 51, 55, 255), secondary_color: Sequence[int] = (29, 151, 236, 103), **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvMenu(ContainerItem, AppItemType):
    command  = dearpygui.add_menu
    identity = dearpygui.mvMenu, 'mvAppItemType::mvMenu'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    payload_type: str
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    delay_search: bool
    tracked: bool
    track_offset: float

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, filter_key: str = '', delay_search: bool = False, tracked: bool = False, track_offset: float = 0.5, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvMenuBar(ContainerItem, AppItemType):
    command  = dearpygui.add_menu_bar
    identity = dearpygui.mvMenuBar, 'mvAppItemType::mvMenuBar'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    show: bool
    delay_search: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, show: bool = True, delay_search: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvMenuItem(ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_menu_item
    identity = dearpygui.mvMenuItem, 'mvAppItemType::mvMenuItem'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    payload_type: str
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    shortcut: str
    check: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: bool = False, shortcut: str = '', check: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvMouseClickHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_mouse_click_handler
    identity = dearpygui.mvMouseClickHandler, 'mvAppItemType::mvMouseClickHandler'

    button: int
    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, button: int = -1, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, callback: DPGCallback = None, show: bool = True, parent: ItemId = 11, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvMouseDoubleClickHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_mouse_double_click_handler
    identity = dearpygui.mvMouseDoubleClickHandler, 'mvAppItemType::mvMouseDoubleClickHandler'

    button: int
    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, button: int = -1, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, callback: DPGCallback = None, show: bool = True, parent: ItemId = 11, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvMouseDownHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_mouse_down_handler
    identity = dearpygui.mvMouseDownHandler, 'mvAppItemType::mvMouseDownHandler'

    button: int
    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, button: int = -1, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, callback: DPGCallback = None, show: bool = True, parent: ItemId = 11, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvMouseDragHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_mouse_drag_handler
    identity = dearpygui.mvMouseDragHandler, 'mvAppItemType::mvMouseDragHandler'

    button: int
    threshold: float
    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, button: int = -1, threshold: float = 10.0, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, callback: DPGCallback = None, show: bool = True, parent: ItemId = 11, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvMouseMoveHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_mouse_move_handler
    identity = dearpygui.mvMouseMoveHandler, 'mvAppItemType::mvMouseMoveHandler'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, callback: DPGCallback = None, show: bool = True, parent: ItemId = 11, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvMouseReleaseHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_mouse_release_handler
    identity = dearpygui.mvMouseReleaseHandler, 'mvAppItemType::mvMouseReleaseHandler'

    button: int
    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, button: int = -1, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, callback: DPGCallback = None, show: bool = True, parent: ItemId = 11, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvMouseWheelHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_mouse_wheel_handler
    identity = dearpygui.mvMouseWheelHandler, 'mvAppItemType::mvMouseWheelHandler'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, callback: DPGCallback = None, show: bool = True, parent: ItemId = 11, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvNode(ContainerItem, PositionedItem, AppItemType):
    command  = dearpygui.add_node
    identity = dearpygui.mvNode, 'mvAppItemType::mvNode'

    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    delay_search: bool
    tracked: bool
    track_offset: float
    draggable: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', delay_search: bool = False, tracked: bool = False, track_offset: float = 0.5, draggable: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvNodeAttribute(ContainerItem, AppItemType):
    command  = dearpygui.add_node_attribute
    identity = dearpygui.mvNodeAttribute, 'mvAppItemType::mvNodeAttribute'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    show: bool
    filter_key: str
    tracked: bool
    track_offset: float
    attribute_type: int
    shape: int
    category: str

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, show: bool = True, filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, attribute_type: int = 0, shape: int = 1, category: str = 'general', **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvNodeEditor(ContainerItem, CallableItem, AppItemType):
    command  = dearpygui.add_node_editor
    identity = dearpygui.mvNodeEditor, 'mvAppItemType::mvNodeEditor'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    height: int
    before: ItemId
    show: bool
    filter_key: str
    delay_search: bool
    tracked: bool
    track_offset: float
    delink_callback: DPGCallback
    menubar: bool
    minimap: bool
    minimap_location: int

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, parent: ItemId = 0, before: ItemId = 0, callback: DPGCallback = None, show: bool = True, filter_key: str = '', delay_search: bool = False, tracked: bool = False, track_offset: float = 0.5, delink_callback: DPGCallback = None, menubar: bool = False, minimap: bool = False, minimap_location: int = 2, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvNodeLink(AppItemType):
    command  = dearpygui.add_node_link
    identity = dearpygui.mvNodeLink, 'mvAppItemType::mvNodeLink'

    attr_1: Union[int, str]
    attr_2: Union[int, str]
    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, attr_1: Union[int, str], attr_2: Union[int, str], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvPieSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_pie_series
    identity = dearpygui.mvPieSeries, 'mvAppItemType::mvPieSeries'

    x: float
    y: float
    radius: float
    labels: Sequence[str]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool
    format: str
    angle: float
    normalize: bool

    @overload
    def __init__(self, x: float, y: float, radius: float, values: Sequence[float], labels: Sequence[str], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, format: str = '%0.2f', angle: float = 90.0, normalize: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvPlot(ContainerItem, SizedItem, CallableItem, AppItemType):
    command  = dearpygui.add_plot
    identity = dearpygui.mvPlot, 'mvAppItemType::mvPlot'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    delay_search: bool
    tracked: bool
    track_offset: float
    no_title: bool
    no_menus: bool
    no_box_select: bool
    no_mouse_pos: bool
    no_highlight: bool
    no_child: bool
    query: bool
    crosshairs: bool
    anti_aliased: bool
    equal_aspects: bool
    use_local_time: bool
    use_ISO8601: bool
    use_24hour_clock: bool
    pan_button: int
    pan_mod: int
    fit_button: int
    context_menu_button: int
    box_select_button: int
    box_select_mod: int
    box_select_cancel_button: int
    query_button: int
    query_mod: int
    query_toggle_mod: int
    horizontal_mod: int
    vertical_mod: int

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', delay_search: bool = False, tracked: bool = False, track_offset: float = 0.5, no_title: bool = False, no_menus: bool = False, no_box_select: bool = False, no_mouse_pos: bool = False, no_highlight: bool = False, no_child: bool = False, query: bool = False, crosshairs: bool = False, anti_aliased: bool = False, equal_aspects: bool = False, use_local_time: bool = False, use_ISO8601: bool = False, use_24hour_clock: bool = False, pan_button: int = 0, pan_mod: int = -1, fit_button: int = 0, context_menu_button: int = 1, box_select_button: int = 1, box_select_mod: int = -1, box_select_cancel_button: int = 0, query_button: int = 2, query_mod: int = -1, query_toggle_mod: int = 17, horizontal_mod: int = 18, vertical_mod: int = 16, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvPlotAxis(ContainerItem, AppItemType):
    command  = dearpygui.add_plot_axis
    identity = dearpygui.mvPlotAxis, 'mvAppItemType::mvPlotAxis'

    axis: int
    label: str
    user_data: Any
    use_internal_label: bool
    payload_type: str
    drop_callback: DPGCallback
    show: bool
    no_gridlines: bool
    no_tick_marks: bool
    no_tick_labels: bool
    log_scale: bool
    invert: bool
    lock_min: bool
    lock_max: bool
    time: bool

    @overload
    def __init__(self, axis: int, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', drop_callback: DPGCallback = None, show: bool = True, no_gridlines: bool = False, no_tick_marks: bool = False, no_tick_labels: bool = False, log_scale: bool = False, invert: bool = False, lock_min: bool = False, lock_max: bool = False, time: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvPlotLegend(AppItemType):
    command  = dearpygui.add_plot_legend
    identity = dearpygui.mvPlotLegend, 'mvAppItemType::mvPlotLegend'

    label: str
    user_data: Any
    use_internal_label: bool
    payload_type: str
    drop_callback: DPGCallback
    show: bool
    location: int
    horizontal: bool
    outside: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', drop_callback: DPGCallback = None, show: bool = True, location: int = 5, horizontal: bool = False, outside: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvProgressBar(SizedItem, ValueAbleItem, AppItemType):
    command  = dearpygui.add_progress_bar
    identity = dearpygui.mvProgressBar, 'mvAppItemType::mvProgressBar'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    tracked: bool
    track_offset: float
    overlay: str

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, overlay: str = '', default_value: float = 0.0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvRadioButton(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_radio_button
    identity = dearpygui.mvRadioButton, 'mvAppItemType::mvRadioButton'

    items: Sequence[str]
    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    horizontal: bool

    @overload
    def __init__(self, items: Sequence[str] = (), *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: str = '', horizontal: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvRawTexture(ValueAbleItem, AppItemType):
    command  = dearpygui.add_raw_texture
    identity = dearpygui.mvRawTexture, 'mvAppItemType::mvRawTexture'

    width: int
    height: int
    label: str
    user_data: Any
    use_internal_label: bool
    format: int

    @overload
    def __init__(self, width: int, height: int, default_value: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, format: int = 0, parent: ItemId = 12, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvResizeHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_item_resize_handler
    identity = dearpygui.mvResizeHandler, 'mvAppItemType::mvResizeHandler'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, callback: DPGCallback = None, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvScatterSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_scatter_series
    identity = dearpygui.mvScatterSeries, 'mvAppItemType::mvScatterSeries'

    x: Sequence[float]
    y: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool

    @overload
    def __init__(self, x: Sequence[float], y: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvSelectable(SizedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_selectable
    identity = dearpygui.mvSelectable, 'mvAppItemType::mvSelectable'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    span_columns: bool
    disable_popup_close: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: bool = False, span_columns: bool = False, disable_popup_close: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvSeparator(PositionedItem, AppItemType):
    command  = dearpygui.add_separator
    identity = dearpygui.mvSeparator, 'mvAppItemType::mvSeparator'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, show: bool = True, pos: Array[int, int] = (), **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvSeriesValue(ValueArrayItem, AppItemType):
    command  = dearpygui.add_series_value
    identity = dearpygui.mvSeriesValue, 'mvAppItemType::mvSeriesValue'

    label: str
    user_data: Any
    use_internal_label: bool
    source: ItemId

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, source: ItemId = 0, default_value: Any = (), parent: ItemId = 13, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvShadeSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_shade_series
    identity = dearpygui.mvShadeSeries, 'mvAppItemType::mvShadeSeries'

    x: Sequence[float]
    y1: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool
    y2: Any

    @overload
    def __init__(self, x: Sequence[float], y1: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, y2: Any = [], **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvSimplePlot(ValueAbleItem, AppItemType):
    command  = dearpygui.add_simple_plot
    identity = dearpygui.mvSimplePlot, 'mvAppItemType::mvSimplePlot'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    height: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    tracked: bool
    track_offset: float
    overlay: str
    histogram: bool
    autosize: bool
    min_scale: float
    max_scale: float

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: Sequence[float] = (), overlay: str = '', histogram: bool = False, autosize: bool = True, min_scale: float = 0.0, max_scale: float = 0.0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvSlider3D(SizedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_3d_slider
    identity = dearpygui.mvSlider3D, 'mvAppItemType::mvSlider3D'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    tracked: bool
    track_offset: float
    max_x: float
    max_y: float
    max_z: float
    min_x: float
    min_y: float
    min_z: float
    scale: float

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: Sequence[float] = (0.0, 0.0, 0.0, 0.0), max_x: float = 100.0, max_y: float = 100.0, max_z: float = 100.0, min_x: float = 0.0, min_y: float = 0.0, min_z: float = 0.0, scale: float = 1.0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvSliderDouble(SizedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_slider_double
    identity = dearpygui.mvSliderDouble, 'mvAppItemType::mvSliderDouble'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    vertical: bool
    no_input: bool
    clamped: bool
    format: str

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: float = 0.0, vertical: bool = False, no_input: bool = False, clamped: bool = False, min_value: float = 0.0, max_value: float = 100.0, format: str = '%.3f', **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvSliderDoubleMulti(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_slider_doublex
    identity = dearpygui.mvSliderDoubleMulti, 'mvAppItemType::mvSliderDoubleMulti'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    size: int
    no_input: bool
    clamped: bool
    format: str

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: Any = (0.0, 0.0, 0.0, 0.0), size: int = 4, no_input: bool = False, clamped: bool = False, min_value: float = 0.0, max_value: float = 100.0, format: str = '%.3f', **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvSliderFloat(SizedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_slider_float
    identity = dearpygui.mvSliderFloat, 'mvAppItemType::mvSliderFloat'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    vertical: bool
    no_input: bool
    clamped: bool
    format: str

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: float = 0.0, vertical: bool = False, no_input: bool = False, clamped: bool = False, min_value: float = 0.0, max_value: float = 100.0, format: str = '%.3f', **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvSliderFloatMulti(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_slider_floatx
    identity = dearpygui.mvSliderFloatMulti, 'mvAppItemType::mvSliderFloatMulti'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    size: int
    no_input: bool
    clamped: bool
    format: str

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: Sequence[float] = (0.0, 0.0, 0.0, 0.0), size: int = 4, no_input: bool = False, clamped: bool = False, min_value: float = 0.0, max_value: float = 100.0, format: str = '%.3f', **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvSliderInt(SizedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_slider_int
    identity = dearpygui.mvSliderInt, 'mvAppItemType::mvSliderInt'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    vertical: bool
    no_input: bool
    clamped: bool
    format: str

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: int = 0, vertical: bool = False, no_input: bool = False, clamped: bool = False, min_value: int = 0, max_value: int = 100, format: str = '%d', **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvSliderIntMulti(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_slider_intx
    identity = dearpygui.mvSliderIntMulti, 'mvAppItemType::mvSliderIntMulti'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    enabled: bool
    filter_key: str
    tracked: bool
    track_offset: float
    size: int
    no_input: bool
    clamped: bool
    format: str

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, enabled: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: Sequence[int] = (0, 0, 0, 0), size: int = 4, no_input: bool = False, clamped: bool = False, min_value: int = 0, max_value: int = 100, format: str = '%d', **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvSpacer(SizedItem, AppItemType):
    command  = dearpygui.add_spacer
    identity = dearpygui.mvSpacer, 'mvAppItemType::mvSpacer'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, show: bool = True, pos: Array[int, int] = (), **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvStage(RootItem, AppItemType):
    command  = dearpygui.add_stage
    identity = dearpygui.mvStage, 'mvAppItemType::mvStage'

    label: str
    user_data: Any
    use_internal_label: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvStairSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_stair_series
    identity = dearpygui.mvStairSeries, 'mvAppItemType::mvStairSeries'

    x: Sequence[float]
    y: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool

    @overload
    def __init__(self, x: Sequence[float], y: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvStaticTexture(ValueAbleItem, AppItemType):
    command  = dearpygui.add_static_texture
    identity = dearpygui.mvStaticTexture, 'mvAppItemType::mvStaticTexture'

    width: int
    height: int
    label: str
    user_data: Any
    use_internal_label: bool

    @overload
    def __init__(self, width: int, height: int, default_value: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 12, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvStemSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_stem_series
    identity = dearpygui.mvStemSeries, 'mvAppItemType::mvStemSeries'

    x: Sequence[float]
    y: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    show: bool

    @overload
    def __init__(self, x: Sequence[float], y: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvStringValue(ValueAbleItem, AppItemType):
    command  = dearpygui.add_string_value
    identity = dearpygui.mvStringValue, 'mvAppItemType::mvStringValue'

    label: str
    user_data: Any
    use_internal_label: bool
    source: ItemId

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, source: ItemId = 0, default_value: str = '', parent: ItemId = 13, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvSubPlots(ContainerItem, SizedItem, CallableItem, AppItemType):
    command  = dearpygui.add_subplots
    identity = dearpygui.mvSubPlots, 'mvAppItemType::mvSubPlots'

    rows: int
    columns: int
    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    show: bool
    filter_key: str
    delay_search: bool
    tracked: bool
    track_offset: float
    row_ratios: Sequence[float]
    column_ratios: Sequence[float]
    no_title: bool
    no_menus: bool
    no_resize: bool
    no_align: bool
    link_rows: bool
    link_columns: bool
    link_all_x: bool
    link_all_y: bool
    column_major: bool

    @overload
    def __init__(self, rows: int, columns: int, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', delay_search: bool = False, tracked: bool = False, track_offset: float = 0.5, row_ratios: Sequence[float] = [], column_ratios: Sequence[float] = [], no_title: bool = False, no_menus: bool = False, no_resize: bool = False, no_align: bool = False, link_rows: bool = False, link_columns: bool = False, link_all_x: bool = False, link_all_y: bool = False, column_major: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvTab(ContainerItem, AppItemType):
    command  = dearpygui.add_tab
    identity = dearpygui.mvTab, 'mvAppItemType::mvTab'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    payload_type: str
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    delay_search: bool
    tracked: bool
    track_offset: float
    closable: bool
    no_tooltip: bool
    order_mode: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', drop_callback: DPGCallback = None, show: bool = True, filter_key: str = '', delay_search: bool = False, tracked: bool = False, track_offset: float = 0.5, closable: bool = False, no_tooltip: bool = False, order_mode: bool = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvTabBar(ContainerItem, PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_tab_bar
    identity = dearpygui.mvTabBar, 'mvAppItemType::mvTabBar'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    show: bool
    filter_key: str
    delay_search: bool
    tracked: bool
    track_offset: float
    reorderable: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', delay_search: bool = False, tracked: bool = False, track_offset: float = 0.5, reorderable: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvTabButton(CallableItem, AppItemType):
    command  = dearpygui.add_tab_button
    identity = dearpygui.mvTabButton, 'mvAppItemType::mvTabButton'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    tracked: bool
    track_offset: float
    no_reorder: bool
    leading: bool
    trailing: bool
    no_tooltip: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, no_reorder: bool = False, leading: bool = False, trailing: bool = False, no_tooltip: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvTable(ContainerItem, SizedItem, CallableItem, AppItemType):
    command  = dearpygui.add_table
    identity = dearpygui.mvTable, 'mvAppItemType::mvTable'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    show: bool
    filter_key: str
    delay_search: bool
    header_row: bool
    clipper: bool
    inner_width: int
    policy: int
    freeze_rows: int
    freeze_columns: int
    sort_multi: bool
    sort_tristate: bool
    resizable: bool
    reorderable: bool
    hideable: bool
    sortable: bool
    context_menu_in_body: bool
    row_background: bool
    borders_innerH: bool
    borders_outerH: bool
    borders_innerV: bool
    borders_outerV: bool
    no_host_extendX: bool
    no_host_extendY: bool
    no_keep_columns_visible: bool
    precise_widths: bool
    no_clip: bool
    pad_outerX: bool
    no_pad_outerX: bool
    no_pad_innerX: bool
    scrollX: bool
    scrollY: bool
    no_saved_settings: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', delay_search: bool = False, header_row: bool = True, clipper: bool = False, inner_width: int = 0, policy: int = 0, freeze_rows: int = 0, freeze_columns: int = 0, sort_multi: bool = False, sort_tristate: bool = False, resizable: bool = False, reorderable: bool = False, hideable: bool = False, sortable: bool = False, context_menu_in_body: bool = False, row_background: bool = False, borders_innerH: bool = False, borders_outerH: bool = False, borders_innerV: bool = False, borders_outerV: bool = False, no_host_extendX: bool = False, no_host_extendY: bool = False, no_keep_columns_visible: bool = False, precise_widths: bool = False, no_clip: bool = False, pad_outerX: bool = False, no_pad_outerX: bool = False, no_pad_innerX: bool = False, scrollX: bool = False, scrollY: bool = False, no_saved_settings: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvTableCell(ContainerItem, AppItemType):
    command  = dearpygui.add_table_cell
    identity = dearpygui.mvTableCell, 'mvAppItemType::mvTableCell'

    label: str
    user_data: Any
    use_internal_label: bool
    height: int
    before: ItemId
    show: bool
    filter_key: str

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, height: int = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, filter_key: str = '', **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvTableColumn(AppItemType):
    command  = dearpygui.add_table_column
    identity = dearpygui.mvTableColumn, 'mvAppItemType::mvTableColumn'

    label: str
    user_data: Any
    use_internal_label: bool
    width: int
    before: ItemId
    show: bool
    enabled: bool
    init_width_or_weight: float
    width_stretch: bool
    width_fixed: bool
    no_resize: bool
    no_reorder: bool
    no_hide: bool
    no_clip: bool
    no_sort: bool
    no_sort_ascending: bool
    no_sort_descending: bool
    no_header_width: bool
    prefer_sort_ascending: bool
    prefer_sort_descending: bool
    indent_enable: bool
    indent_disable: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, enabled: bool = True, init_width_or_weight: float = 0.0, default_hide: bool = False, default_sort: bool = False, width_stretch: bool = False, width_fixed: bool = False, no_resize: bool = False, no_reorder: bool = False, no_hide: bool = False, no_clip: bool = False, no_sort: bool = False, no_sort_ascending: bool = False, no_sort_descending: bool = False, no_header_width: bool = False, prefer_sort_ascending: bool = True, prefer_sort_descending: bool = False, indent_enable: bool = False, indent_disable: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvTableRow(ContainerItem, AppItemType):
    command  = dearpygui.add_table_row
    identity = dearpygui.mvTableRow, 'mvAppItemType::mvTableRow'

    label: str
    user_data: Any
    use_internal_label: bool
    height: int
    before: ItemId
    show: bool
    filter_key: str

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, height: int = 0, parent: ItemId = 0, before: ItemId = 0, show: bool = True, filter_key: str = '', **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvTemplateRegistry(RegistryItem, AppItemType):
    command  = dearpygui.add_template_registry
    identity = dearpygui.mvTemplateRegistry, 'mvAppItemType::mvTemplateRegistry'

    label: str
    user_data: Any
    use_internal_label: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvText(PositionedItem, ValueAbleItem, AppItemType):
    command  = dearpygui.add_text
    identity = dearpygui.mvText, 'mvAppItemType::mvText'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    source: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    tracked: bool
    track_offset: float
    wrap: int
    bullet: bool
    color: Sequence[int]
    show_label: bool

    @overload
    def __init__(self, default_value: str = '', *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, wrap: int = -1, bullet: bool = False, color: Sequence[int] = (-255, 0, 0, 255), show_label: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvTextureRegistry(RegistryItem, AppItemType):
    command  = dearpygui.add_texture_registry
    identity = dearpygui.mvTextureRegistry, 'mvAppItemType::mvTextureRegistry'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, show: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvTheme(RegistryItem, AppItemType):
    command  = dearpygui.add_theme
    identity = dearpygui.mvTheme, 'mvAppItemType::mvTheme'

    label: str
    user_data: Any
    use_internal_label: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvThemeColor(ValueArrayItem, AppItemType):
    command  = dearpygui.add_theme_color
    identity = dearpygui.mvThemeColor, 'mvAppItemType::mvThemeColor'

    target: int
    label: str
    user_data: Any
    use_internal_label: bool
    category: int

    @overload
    def __init__(self, target: int = 0, value: Sequence[int] = (0, 0, 0, 255), *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, category: int = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvThemeComponent(ContainerItem, AppItemType):
    command  = dearpygui.add_theme_component
    identity = dearpygui.mvThemeComponent, 'mvAppItemType::mvThemeComponent'

    item_type: int
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    enabled_state: bool

    @overload
    def __init__(self, item_type: int = 0, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, enabled_state: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvThemeStyle(ValueArrayItem, AppItemType):
    command  = dearpygui.add_theme_style
    identity = dearpygui.mvThemeStyle, 'mvAppItemType::mvThemeStyle'

    target: int
    x: float
    y: float
    label: str
    user_data: Any
    use_internal_label: bool
    category: int

    @overload
    def __init__(self, target: int = 0, x: float = 1.0, y: float = -1.0, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, category: int = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvTimePicker(PositionedItem, ValueAbleItem, CallableItem, AppItemType):
    command  = dearpygui.add_time_picker
    identity = dearpygui.mvTimePicker, 'mvAppItemType::mvTimePicker'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    tracked: bool
    track_offset: float
    hour24: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', callback: DPGCallback = None, drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', tracked: bool = False, track_offset: float = 0.5, default_value: dict = {'hour': 14, 'min': 32, 'sec': 23}, hour24: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvToggledOpenHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_item_toggled_open_handler
    identity = dearpygui.mvToggledOpenHandler, 'mvAppItemType::mvToggledOpenHandler'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, callback: DPGCallback = None, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvTooltip(ContainerItem, AppItemType):
    command  = dearpygui.add_tooltip
    identity = dearpygui.mvTooltip, 'mvAppItemType::mvTooltip'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, parent: Union[int, str], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvTreeNode(ContainerItem, PositionedItem, AppItemType):
    command  = dearpygui.add_tree_node
    identity = dearpygui.mvTreeNode, 'mvAppItemType::mvTreeNode'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    before: ItemId
    payload_type: str
    drag_callback: DPGCallback
    drop_callback: DPGCallback
    show: bool
    filter_key: str
    delay_search: bool
    tracked: bool
    track_offset: float
    open_on_double_click: bool
    open_on_arrow: bool
    leaf: bool
    bullet: bool
    selectable: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, before: ItemId = 0, payload_type: str = '$$DPG_PAYLOAD', drag_callback: DPGCallback = None, drop_callback: DPGCallback = None, show: bool = True, pos: Array[int, int] = (), filter_key: str = '', delay_search: bool = False, tracked: bool = False, track_offset: float = 0.5, default_open: bool = False, open_on_double_click: bool = False, open_on_arrow: bool = False, leaf: bool = False, bullet: bool = False, selectable: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvVLineSeries(ValueArrayItem, AppItemType):
    command  = dearpygui.add_vline_series
    identity = dearpygui.mvVLineSeries, 'mvAppItemType::mvVLineSeries'

    x: Sequence[float]
    label: str
    user_data: Any
    use_internal_label: bool
    before: ItemId
    source: ItemId
    show: bool

    @overload
    def __init__(self, x: Sequence[float], *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, before: ItemId = 0, source: ItemId = 0, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvValueRegistry(RegistryItem, AppItemType):
    command  = dearpygui.add_value_registry
    identity = dearpygui.mvValueRegistry, 'mvAppItemType::mvValueRegistry'

    label: str
    user_data: Any
    use_internal_label: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvViewportDrawlist(RootItem, AppItemType):
    command  = dearpygui.add_viewport_drawlist
    identity = dearpygui.mvViewportDrawlist, 'mvAppItemType::mvViewportDrawlist'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool
    filter_key: str
    delay_search: bool
    front: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, show: bool = True, filter_key: str = '', delay_search: bool = False, front: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvViewportMenuBar(ContainerItem, AppItemType):
    command  = dearpygui.add_viewport_menu_bar
    identity = dearpygui.mvViewportMenuBar, 'mvAppItemType::mvViewportMenuBar'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    show: bool
    delay_search: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, indent: int = -1, parent: ItemId = 0, show: bool = True, delay_search: bool = False, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvVisibleHandler(HandlerItem, AppItemType):
    command  = dearpygui.add_item_visible_handler
    identity = dearpygui.mvVisibleHandler, 'mvAppItemType::mvVisibleHandler'

    label: str
    user_data: Any
    use_internal_label: bool
    show: bool

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, parent: ItemId = 0, callback: DPGCallback = None, show: bool = True, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


class mvWindowAppItem(WindowItem, RootItem, SizedItem, AppItemType):
    command  = dearpygui.add_window
    identity = dearpygui.mvWindowAppItem, 'mvAppItemType::mvWindowAppItem'

    label: str
    user_data: Any
    use_internal_label: bool
    indent: int
    show: bool
    delay_search: bool
    min_size: Sequence[int]
    max_size: Sequence[int]
    menubar: bool
    collapsed: bool
    autosize: bool
    no_resize: bool
    no_title_bar: bool
    no_move: bool
    no_scrollbar: bool
    no_collapse: bool
    horizontal_scrollbar: bool
    no_focus_on_appearing: bool
    no_bring_to_front_on_focus: bool
    no_close: bool
    no_background: bool
    modal: bool
    popup: bool
    no_saved_settings: bool
    no_open_over_existing_popup: bool
    on_close: Callable

    @overload
    def __init__(self, *, label: str = None, user_data: Any = None, use_internal_label: bool = True, tag: ItemId = 0, width: int = 0, height: int = 0, indent: int = -1, show: bool = True, pos: Array[int, int] = (), delay_search: bool = False, min_size: Sequence[int] = [100, 100], max_size: Sequence[int] = [30000, 30000], menubar: bool = False, collapsed: bool = False, autosize: bool = False, no_resize: bool = False, no_title_bar: bool = False, no_move: bool = False, no_scrollbar: bool = False, no_collapse: bool = False, horizontal_scrollbar: bool = False, no_focus_on_appearing: bool = False, no_bring_to_front_on_focus: bool = False, no_close: bool = False, no_background: bool = False, modal: bool = False, popup: bool = False, no_saved_settings: bool = False, no_open_over_existing_popup: bool = True, on_close: Callable = None, **kwargs) -> None: ...
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)


