"""Objects for various uses (except as Item-subclass mixins).
"""
import functools
from abc import ABCMeta, abstractmethod
from inspect import signature
from typing import Any, Iterable, Union, Callable, TypeVar
from dataclasses import dataclass, field, asdict
from dearpypixl.components.item import ItemAttributeCache, Item
from dearpypixl.errors import DearPyGuiErrorHandler


__all__ = [
    "UniqueItemMeta",
    "ItemLike",
    "UpdaterList",
]


class UniqueItemMeta(ABCMeta):
    """A metaclass for singleton classes.
    """
    __instance__ = None

    def __call__(cls, *args, **kwargs):
        if cls.__instance__ is None:
            cls.__instance__ = super().__call__(*args, **kwargs)
        return cls.__instance__


class ItemLike(ItemAttributeCache, metaclass=ABCMeta):
    """A template for item-like subclasses. Mimics the `Item` API,
    but inherits a limited number of methods.
    """
    @abstractmethod
    def _get_configuration(self) -> dict: ...
    @abstractmethod
    def _set_configuration(self, **kwargs) -> None: ...
    @abstractmethod
    def _config_params() -> Iterable: ...
    @abstractmethod
    def _tag(self) -> Any: ...

    _appitems = Item._appitems
    _setup_params: set = ()          # all parameters used by the constructor
    _readonly_params: set = ()       # read-only configuration
    _command = None

    tag = Item.tag

    def __init__(self, **kwargs):
        # Used in `configuration`.
        if not self._setup_params:
            self._setup_params = self._config_params

        # `_command` is not abstract for this object and is optional.
        if self._command:
            with DearPyGuiErrorHandler(self):
                self._command(**kwargs)  # Item Creation

    def __repr__(self):
        configuration = {"tag": self._tag, **self.configuration()}

        return (
            f"{type(self).__qualname__}("
            + f", ".join((f'{attr}={val!r}' for attr,
                         val in configuration.items()))
            + f")"
        )

    def __getattr__(self, attr):
        try:
            return self._get_configuration()[attr]
        except KeyError:
            raise AttributeError(
                f"{type(self).__qualname__!r} object has no attribute {attr!r}.")

    def __setattr__(self, attr, value):
        # Prioritizing descriptors.
        if hasattr(type(self), attr):
            return object.__setattr__(self, attr, value)
        elif attr in self._config_params:
            with DearPyGuiErrorHandler(self, attr, value):
                return self._set_configuration(**{attr: value})
        elif attr in self._readonly_params:
            raise AttributeError(f"{attr!r} is read-only and cannot be set.")
        object.__setattr__(self, attr, value)

    def configure(self, **config) -> None:
        return Item.configure(self, **config)

    def configuration(self) -> dict:
        setup_params = self._setup_params
        configuration = {optn: val for optn, val in
                         self._get_configuration().items()
                         if optn in setup_params}
        getattribute = object.__getattribute__

        for option, attribute in self._config_overrides.items():
            configuration.pop(option, None)   # no key overwrite if aliased
            configuration[attribute] = getattribute(self, attribute)
        return configuration


class UpdaterList(list, metaclass=ABCMeta):
    """An instance of `list` that runs a callable immediately after
    the list has been updated through various methods.
    """
    @staticmethod
    @abstractmethod
    def _on_update(__iterable: Iterable): ...

    def __init__(self, __iterable=None):
        if __iterable:
            list.__init__(self, __iterable)
        else:
            list.__init__(self)

        self._on_update(self)

    def __on_update(method):
        @functools.wraps(method)
        def wrapper(self, *args, **kwargs):
            rtn = method(self, *args, **kwargs)
            self._on_update(self)
            return rtn
        return wrapper

    @__on_update
    def __add__(self, x: list) -> list:
        list.__add__(self, x)

    @__on_update
    def append(self, __object):
        list.append(self, __object)

    @__on_update
    def extend(self, __iterable) -> None:
        list.extend(self, __iterable)

    @__on_update
    def pop(self, __index=...) -> object:
        list.pop(self, __index)

    @__on_update
    def insert(self, __index, __object) -> None:
        list.insert(self, __index, __object)

    @__on_update
    def remove(self, __value) -> None:
        list.remove(self, __value)

    @__on_update
    def reverse(self) -> None:
        list.reverse(self)

    @__on_update
    def clear(self) -> None:
        list.clear(self)



class ConfigContainer:
    _target_params = ()
    _configuration = ()
    def __init__(self, target_item: Item, **kwargs):
        """A configuration container for Item objects.

        Args:
            * target_item (Item): The item you wish to instantiate using this
            object's configuration.
        """
        self._target_item = target_item  #  "target object/item"
        self._target_params = tuple([*signature(target_item).parameters])
        self._configuration = {}
        self.configure(**kwargs)

    def __setattr__(self, attr, value):
        if attr in self._target_params:
            self._configuration[attr] = value
            return None
        elif attr.startswith("_"):  # allow private attributes
            return object.__setattr__(self, attr, value)
        raise AttributeError(f"{self._target_item!r} does not accept this parameter.")

    def __getattr__(self, attr):
        if attr in self._configuration:
            return self._configuration[attr]
        elif attr in self._target_params:
            return None
        raise AttributeError(f"{type(self)!r} has no attribute {attr!r}.")

    def create(self) -> Item:
        """Return an instance from the target item using this object's configuration.
        """
        return self._target_item(**self._configuration)

    def parameters(self) -> tuple:
        """Return a tuple containing the accepted parameters for the
        target constructor.
        """
        return self._target_params

    def configuration(self) -> dict:
        return self._configuration

    def configure(self, **config) -> None:
        _setattr = self.__setattr__
        [_setattr(optn, value) for optn, value in config.items()]

    alpha_bar: bool = ...
    alpha_preview: int = ...
    angle: float = ...
    anti_aliased: bool = ...
    arrow: bool = ...
    attr_1: Union[int, str] = ...
    attr_2: Union[int, str] = ...
    attribute_type: int = ...
    autosize: bool = ...
    autosize_x: bool = ...
    autosize_y: bool = ...
    axis: int = ...
    background_color: Union[list[float], tuple[float, ...]] = ...
    bar_scale: float = ...
    bear_color: Union[list[int], tuple[int, ...]] = ...
    before: Union[int, str] = ...
    bins: int = ...
    border: bool = ...
    border_color: Union[list[float], tuple[float, ...]] = ...
    borders_innerH: bool = ...
    borders_innerV: bool = ...
    borders_outerH: bool = ...
    borders_outerV: bool = ...
    bounds_max: Union[list[float], tuple[float, ...]] = ...
    bounds_min: Union[list[float], tuple[float, ...]] = ...
    box_select_button: int = ...
    box_select_cancel_button: int = ...
    box_select_mod: int = ...
    bull_color: Union[list[int], tuple[int, ...]] = ...
    bullet: bool = ...
    button: int = ...
    callback: Callable = ...
    category: int = ...
    center: Union[list[float], tuple[float, ...]] = ...
    chars: Union[list[int], tuple[int, ...]] = ...
    check: bool = ...
    circle_count: int = ...
    clamped: bool = ...
    clipper: bool = ...
    closable: bool = ...
    closed: bool = ...
    closes: Union[list[float], tuple[float, ...]] = ...
    collapsed: bool = ...
    color: Union[list[int], tuple[int, ...]] = ...
    color_bottom_left: Union[list[int], tuple[int, ...]] = ...
    color_bottom_right: Union[list[int], tuple[int, ...]] = ...
    color_upper_left: Union[list[int], tuple[int, ...]] = ...
    color_upper_right: Union[list[int], tuple[int, ...]] = ...
    colormap: Union[int, str] = ...
    colors: list[list[int]] = ...
    cols: int = ...
    column_major: bool = ...
    column_ratios: Union[list[float], tuple[float, ...]] = ...
    columns: int = ...
    context_menu_button: int = ...
    context_menu_in_body: bool = ...
    contribute_to_bounds: bool = ...
    count: int = ...
    crosshairs: bool = ...
    cumlative: bool = ...
    custom_text: str = ...
    dates: Union[list[float], tuple[float, ...]] = ...
    decimal: bool = ...
    default_filename: str = ...
    default_hide: bool = ...
    default_open: bool = ...
    default_path: str = ...
    default_sort: bool = ...
    delay_search: bool = ...
    delink_callback: Callable = ...
    density: bool = ...
    direction: int = ...
    directory_selector: bool = ...
    display_hex: bool = ...
    display_hsv: bool = ...
    display_mode: int = ...
    display_rgb: bool = ...
    display_type: int = ...
    drag_callback: Callable = ...
    drag_data: Any = ...
    draggable: bool = ...
    drop_callback: Callable = ...
    drop_data: Any = ...
    enabled: bool = ...
    enabled_state: bool = ...
    equal_aspects: bool = ...
    extension: str = ...
    file: str = ...
    file_count: int = ...
    fill: Union[list[int], tuple[int, ...]] = ...
    filter_key: str = ...
    first_char: int = ...
    fit_button: int = ...
    format: str = ...
    frame_padding: int = ...
    freeze_columns: int = ...
    freeze_rows: int = ...
    front: bool = ...
    header_row: bool = ...
    height: int = ...
    height_mode: int = ...
    hexadecimal: bool = ...
    hideable: bool = ...
    highs: Union[list[float], tuple[float, ...]] = ...
    hint: str = ...
    histogram: bool = ...
    horizontal: bool = ...
    horizontal_mod: int = ...
    horizontal_scrollbar: bool = ...
    horizontal_spacing: float = ...
    hour24: bool = ...
    indent: int = ...
    indent_disable: bool = ...
    indent_enable: bool = ...
    init_width_or_weight: float = ...
    inner_width: int = ...
    input_mode: int = ...
    invert: bool = ...
    item: Union[int, str] = ...
    item_type: int = ...
    items: Union[list[str], tuple[str, ...]] = ...
    key: int = ...
    kwargs: dict = ...
    label: str = ...
    labels: Union[list[str], tuple[str, ...]] = ...
    last_char: int = ...
    leading: bool = ...
    leaf: bool = ...
    level: int = ...
    link_all_x: bool = ...
    link_all_y: bool = ...
    link_columns: bool = ...
    link_rows: bool = ...
    location: int = ...
    lock_max: bool = ...
    lock_min: bool = ...
    log_scale: bool = ...
    lows: Union[list[float], tuple[float, ...]] = ...
    max_clamped: bool = ...
    max_range: float = ...
    max_scale: float = ...
    max_size: Union[list[int], tuple[int, ...]] = ...
    max_value: int = ...
    max_x: float = ...
    max_y: float = ...
    max_z: float = ...
    menubar: bool = ...
    min_clamped: bool = ...
    min_range: float = ...
    min_scale: float = ...
    min_size: Union[list[int], tuple[int, ...]] = ...
    min_value: int = ...
    min_x: float = ...
    min_y: float = ...
    min_z: float = ...
    modal: bool = ...
    multicolor: bool = ...
    multiline: bool = ...
    negative: Union[list[float], tuple[float, ...]] = ...
    no_align: bool = ...
    no_alpha: bool = ...
    no_arrow_button: bool = ...
    no_background: bool = ...
    no_border: bool = ...
    no_box_select: bool = ...
    no_bring_to_front_on_focus: bool = ...
    no_child: bool = ...
    no_clip: bool = ...
    no_close: bool = ...
    no_collapse: bool = ...
    no_drag_drop: bool = ...
    no_focus_on_appearing: bool = ...
    no_gridlines: bool = ...
    no_header_width: bool = ...
    no_hide: bool = ...
    no_highlight: bool = ...
    no_host_extendX: bool = ...
    no_host_extendY: bool = ...
    no_input: bool = ...
    no_inputs: bool = ...
    no_keep_columns_visible: bool = ...
    no_label: bool = ...
    no_menus: bool = ...
    no_mouse_pos: bool = ...
    no_move: bool = ...
    no_options: bool = ...
    no_pad_innerX: bool = ...
    no_pad_outerX: bool = ...
    no_picker: bool = ...
    no_preview: bool = ...
    no_reorder: bool = ...
    no_resize: bool = ...
    no_saved_settings: bool = ...
    no_scrollbar: bool = ...
    no_side_preview: bool = ...
    no_small_preview: bool = ...
    no_sort: bool = ...
    no_sort_ascending: bool = ...
    no_sort_descending: bool = ...
    no_spaces: bool = ...
    no_tick_labels: bool = ...
    no_tick_marks: bool = ...
    no_title: bool = ...
    no_title_bar: bool = ...
    no_tooltip: bool = ...
    normalize: bool = ...
    num_items: int = ...
    offset: Union[list[float], tuple[float, ...]] = ...
    on_close: Callable = ...
    on_enter: bool = ...
    open_on_arrow: bool = ...
    open_on_double_click: bool = ...
    opens: Union[list[float], tuple[float, ...]] = ...
    order_mode: bool = ...
    outliers: bool = ...
    outside: bool = ...
    overlay: str = ...
    p1: Union[list[float], tuple[float, ...]] = ...
    p2: Union[list[float], tuple[float, ...]] = ...
    p3: Union[list[float], tuple[float, ...]] = ...
    p4: Union[list[float], tuple[float, ...]] = ...
    pad_outerX: bool = ...
    pan_button: int = ...
    pan_mod: int = ...
    parent: Union[int, str] = ...
    password: bool = ...
    payload_type: str = ...
    picker_mode: int = ...
    pmax: Union[list[float], tuple[float, ...]] = ...
    pmin: Union[list[float], tuple[float, ...]] = ...
    points: list[list[float]] = ...
    policy: int = ...
    popup: bool = ...
    popup_align_left: bool = ...
    pos: Union[list[float], tuple[float, ...]] = ...
    positive: Union[list[float], tuple[float, ...]] = ...
    precise_widths: bool = ...
    prefer_sort_ascending: bool = ...
    prefer_sort_descending: bool = ...
    qualitative: bool = ...
    query: bool = ...
    query_button: int = ...
    query_mod: int = ...
    query_toggle_mod: int = ...
    radius: float = ...
    readonly: bool = ...
    reorderable: bool = ...
    resizable: bool = ...
    rounding: float = ...
    row_background: bool = ...
    row_ratios: Union[list[float], tuple[float, ...]] = ...
    rows: int = ...
    scale: float = ...
    scale_max: float = ...
    scale_min: float = ...
    scientific: bool = ...
    scrollX: bool = ...
    scrollY: bool = ...
    secondary_color: Union[list[int], tuple[int, ...]] = ...
    segments: int = ...
    selectable: bool = ...
    shape: int = ...
    shortcut: str = ...
    show: bool = ...
    show_label: bool = ...
    size: float = ...
    small: bool = ...
    sort_multi: bool = ...
    sort_tristate: bool = ...
    sortable: bool = ...
    source: Union[int, str] = ...
    span_columns: bool = ...
    speed: float = ...
    step: int = ...
    step_fast: int = ...
    style: int = ...
    tab_input: bool = ...
    tag: Union[int, str] = ...
    target: int = ...
    text: str = ...
    texture_tag: Union[int, str] = ...
    thickness: float = ...
    threshold: float = ...
    time: bool = ...
    tint_color: Union[list[int], tuple[int, ...]] = ...
    tooltip: bool = ...
    track_offset: float = ...
    tracked: bool = ...
    trailing: bool = ...
    uppercase: bool = ...
    use_internal_label: bool = ...
    user_data: Any = ...
    uv_max: Union[list[float], tuple[float, ...]] = ...
    uv_min: Union[list[float], tuple[float, ...]] = ...
    value: Any = ...
    values: Union[list[float], tuple[float, ...]] = ...
    vertical: bool = ...
    vertical_mod: int = ...
    weight: int = ...
    width: int = ...
    width_fixed: bool = ...
    width_stretch: bool = ...
    wrap: int = ...
    x: Union[list[float], tuple[float, ...]] = ...
    x_offset: int = ...
    xbins: int = ...
    xmax_range: float = ...
    xmin_range: float = ...
    xoffset: float = ...
    y: float = ...
    y1: Union[list[float], tuple[float, ...]] = ...
    y2: Any = ...
    y_offset: int = ...
    ybins: int = ...
    ymax_range: float = ...
    ymin_range: float = ...
